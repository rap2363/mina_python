{
    "sourceFile": "modules/lists/new_puzzle_bfs.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1749581672582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749581725846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,21 @@\n+class State:\r\n+    def __init__(self, configuration):\r\n+        self.configuration = configuration\r\n+\r\n+     def generate_neighbors(self) -> list[State]:\r\n+         # Implement this!\r\n+         # this is where we'll do a list copy\r\n+\r\n+def breadth_first_search(self, initial_state, goal_state) -> list[State]:\r\n+      queue = [] # or could be a deque\r\n+      queue.append(initial_state)\r\n+      visited_states = set([initial_state])\r\n+      while len(queue) > 0:\r\n+           state_to_explore_from = queue.pop()\r\n+           if state_to_explore_from == goal_state:\r\n+               break\r\n+           neighbors = state_to_explore_from.generate_neighbors()\r\n+           for n in neighbors:\r\n+                if n not in visited_states:\r\n+                    queue.append(state_to_explore_fr)\r\n+                    visited_states.add(n)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749581756627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,21 @@\n+class State:\r\n+    def __init__(self, configuration):\r\n+        self.configuration = configuration\r\n+\r\n+     def generate_neighbors(self) -> list[State]:\r\n+         # Imple\r\n+         # this is where we'll do a list copy\r\n+\r\n+def breadth_first_search(self, initial_state, goal_state) -> list[State]:\r\n+      queue = [] # or could be a deque\r\n+      queue.append(initial_state)\r\n+      visited_states = set([initial_state])\r\n+      while len(queue) > 0:\r\n+           state_to_explore_from = queue.pop()\r\n+           if state_to_explore_from == goal_state:\r\n+               break\r\n+           neighbors = state_to_explore_from.generate_neighbors()\r\n+           for n in neighbors:\r\n+                if n not in visited_states:\r\n+                    queue.append(state_to_explore_from)\r\n+                    visited_states.add(n)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749581766505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n class State:\r\n     def __init__(self, configuration):\r\n         self.configuration = configuration\r\n \r\n-     def generate_neighbors(self) -> list[State]:\r\n+     def generate_neighbors(self)  list[State]:\r\n          # Imple\r\n          # this is where we'll do a list copy\r\n \r\n def breadth_first_search(self, initial_state, goal_state) -> list[State]:\r\n@@ -17,26 +17,5 @@\n            neighbors = state_to_explore_from.generate_neighbors()\r\n            for n in neighbors:\r\n                 if n not in visited_states:\r\n                     queue.append(state_to_explore_from)\r\n-                    visited_states.add(n)\n-class State:\r\n-    def __init__(self, configuration):\r\n-        self.configuration = configuration\r\n-\r\n-     def generate_neighbors(self) -> list[State]:\r\n-         # Implement this!\r\n-         # this is where we'll do a list copy\r\n-\r\n-def breadth_first_search(self, initial_state, goal_state) -> list[State]:\r\n-      queue = [] # or could be a deque\r\n-      queue.append(initial_state)\r\n-      visited_states = set([initial_state])\r\n-      while len(queue) > 0:\r\n-           state_to_explore_from = queue.pop()\r\n-           if state_to_explore_from == goal_state:\r\n-               break\r\n-           neighbors = state_to_explore_from.generate_neighbors()\r\n-           for n in neighbors:\r\n-                if n not in visited_states:\r\n-                    queue.append(state_to_explore_fr)\r\n                     visited_states.add(n)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749581779274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n class State:\r\n     def __init__(self, configuration):\r\n         self.configuration = configuration\r\n \r\n-     def generate_neighbors(self)  list[State]:\r\n+     def generate_neighbors(self): # list[State]:\r\n          # Imple\r\n          # this is where we'll do a list copy\r\n \r\n def breadth_first_search(self, initial_state, goal_state) -> list[State]:\r\n"
                },
                {
                    "date": 1749581790438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,21 @@\n+class State:\r\n+    def __init__(self, configuration):\r\n+        self.configuration = configuration\r\n+\r\n+     def generate_neighbors(self): # list[State]:\r\n+         # Imple\r\n+         # this is where we'll do a list copy\r\n+\r\n+    def breadth_first_search(self, initial_state, goal_state) -> list[State]:\r\n+        queue = [] # or could be a deque\r\n+        queue.append(initial_state)\r\n+        visited_states = set([initial_state])\r\n+        while len(queue) > 0:\r\n+            state_to_explore_from = queue.pop()\r\n+            if state_to_explore_from == goal_state:\r\n+                break\r\n+            neighbors = state_to_explore_from.generate_neighbors()\r\n+            for n in neighbors:\r\n+                    if n not in visited_states:\r\n+                        queue.append(state_to_explore_from)\r\n+                        visited_states.add(n)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749581802488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,21 @@\n+class State:\r\n+    def __init__(self, configuration):\r\n+        self.configuration = configuration\r\n+\r\n+     def generate_neighbors(self): # list[State]:\r\n+         \r\n+         # this is where we'll do a list copy\r\n+\r\n+    def breadth_first_search(self, initial_state, goal_state) -> list[State]:\r\n+        queue = [] # or could be a deque\r\n+        queue.append(initial_state)\r\n+        visited_states = set([initial_state])\r\n+        while len(queue) > 0:\r\n+            state_to_explore_from = queue.pop()\r\n+            if state_to_explore_from == goal_state:\r\n+                break\r\n+            neighbors = state_to_explore_from.generate_neighbors()\r\n+            for n in neighbors:\r\n+                    if n not in visited_states:\r\n+                        queue.append(state_to_explore_from)\r\n+                        visited_states.add(n)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749581822839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,21 @@\n+class State:\r\n+    def __init__(self, configuration):\r\n+        self.configuration = configuration\r\n+\r\n+     def generate_neighbors(self): # list[State]:\r\n+         in\r\n+         # this is where we'll do a list copy\r\n+\r\n+    def breadth_first_search(self, initial_state, goal_state) -> list[State]:\r\n+        queue = [] # or could be a deque\r\n+        queue.append(initial_state)\r\n+        visited_states = set([initial_state])\r\n+        while len(queue) > 0:\r\n+            state_to_explore_from = queue.pop()\r\n+            if state_to_explore_from == goal_state:\r\n+                break\r\n+            neighbors = state_to_explore_from.generate_neighbors()\r\n+            for n in neighbors:\r\n+                    if n not in visited_states:\r\n+                        queue.append(state_to_explore_from)\r\n+                        visited_states.add(n)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749581832736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,21 @@\n+class State:\r\n+    def __init__(self, configuration):\r\n+        self.configuration = configuration\r\n+\r\n+     def generate_neighbors(self): # list[State]:\r\n+         initial_state =\r\n+         # this is where we'll do a list copy\r\n+\r\n+    def breadth_first_search(self, initial_state, goal_state) -> list[State]:\r\n+        queue = [] # or could be a deque\r\n+        queue.append(initial_state)\r\n+        visited_states = set([initial_state])\r\n+        while len(queue) > 0:\r\n+            state_to_explore_from = queue.pop()\r\n+            if state_to_explore_from == goal_state:\r\n+                break\r\n+            neighbors = state_to_explore_from.generate_neighbors()\r\n+            for n in neighbors:\r\n+                    if n not in visited_states:\r\n+                        queue.append(state_to_explore_from)\r\n+                        visited_states.add(n)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749581839190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,21 @@\n+class State:\r\n+    def __init__(self, configuration):\r\n+        self.configuration = configuration\r\n+\r\n+     def generate_neighbors(self): # list[State]:\r\n+         initial_state = []\r\n+         # this is where we'll do a list copy\r\n+\r\n+    def breadth_first_search(self, initial_state, goal_state) -> list[State]:\r\n+        queue = [] # or could be a deque\r\n+        queue.append(initial_state)\r\n+        visited_states = set([initial_state])\r\n+        while len(queue) > 0:\r\n+            state_to_explore_from = queue.pop()\r\n+            if state_to_explore_from == goal_state:\r\n+                break\r\n+            neighbors = state_to_explore_from.generate_neighbors()\r\n+            for n in neighbors:\r\n+                    if n not in visited_states:\r\n+                        queue.append(state_to_explore_from)\r\n+                        visited_states.add(n)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749581855941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,21 @@\n+class State:\r\n+    def __init__(self, configuration):\r\n+        self.configuration = configuration\r\n+\r\n+     def generate_neighbors(self): # list[State]:\r\n+         initial_state = [9]\r\n+         # this is where we'll do a list copy\r\n+\r\n+    def breadth_first_search(self, initial_state, goal_state) -> list[State]:\r\n+        queue = [] # or could be a deque\r\n+        queue.append(initial_state)\r\n+        visited_states = set([initial_state])\r\n+        while len(queue) > 0:\r\n+            state_to_explore_from = queue.pop()\r\n+            if state_to_explore_from == goal_state:\r\n+                break\r\n+            neighbors = state_to_explore_from.generate_neighbors()\r\n+            for n in neighbors:\r\n+                    if n not in visited_states:\r\n+                        queue.append(state_to_explore_from)\r\n+                        visited_states.add(n)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749581866189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,21 @@\n+class State:\r\n+    def __init__(self, configuration):\r\n+        self.configuration = configuration\r\n+\r\n+     def generate_neighbors(self): # list[State]:\r\n+         initial_state = [(),()]\r\n+         # this is where we'll do a list copy\r\n+\r\n+    def breadth_first_search(self, initial_state, goal_state) -> list[State]:\r\n+        queue = [] # or could be a deque\r\n+        queue.append(initial_state)\r\n+        visited_states = set([initial_state])\r\n+        while len(queue) > 0:\r\n+            state_to_explore_from = queue.pop()\r\n+            if state_to_explore_from == goal_state:\r\n+                break\r\n+            neighbors = state_to_explore_from.generate_neighbors()\r\n+            for n in neighbors:\r\n+                    if n not in visited_states:\r\n+                        queue.append(state_to_explore_from)\r\n+                        visited_states.add(n)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749581872923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n     def __init__(self, configuration):\r\n         self.configuration = configuration\r\n \r\n      def generate_neighbors(self): # list[State]:\r\n-         initial_state = [(),()]\r\n+         initial_state = [(),(),]\r\n          # this is where we'll do a list copy\r\n \r\n     def breadth_first_search(self, initial_state, goal_state) -> list[State]:\r\n         queue = [] # or could be a deque\r\n"
                },
                {
                    "date": 1749581893877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,21 @@\n+class State:\r\n+    def __init__(self, configuration):\r\n+        self.configuration = configuration\r\n+\r\n+     def generate_neighbors(self): # list[State]:\r\n+         initial_state = [(123),(),()]\r\n+         # this is where we'll do a list copy\r\n+\r\n+    def breadth_first_search(self, initial_state, goal_state) -> list[State]:\r\n+        queue = [] # or could be a deque\r\n+        queue.append(initial_state)\r\n+        visited_states = set([initial_state])\r\n+        while len(queue) > 0:\r\n+            state_to_explore_from = queue.pop()\r\n+            if state_to_explore_from == goal_state:\r\n+                break\r\n+            neighbors = state_to_explore_from.generate_neighbors()\r\n+            for n in neighbors:\r\n+                    if n not in visited_states:\r\n+                        queue.append(state_to_explore_from)\r\n+                        visited_states.add(n)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749581915195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n     def __init__(self, configuration):\r\n         self.configuration = configuration\r\n \r\n      def generate_neighbors(self): # list[State]:\r\n-         initial_state = [(1,2,3),(),()]\r\n+         initial_state = [(1,2,3),(4,0,5),()]\r\n          # this is where we'll do a list copy\r\n \r\n     def breadth_first_search(self, initial_state, goal_state) -> list[State]:\r\n         queue = [] # or could be a deque\r\n"
                },
                {
                    "date": 1749581941552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,21 @@\n+class State:\r\n+    def __init__(self, configuration):\r\n+        self.configuration = configuration\r\n+\r\n+     def generate_neighbors(self): # list[State]:\r\n+         initial_state = [(1,2,3),(4,0,5),(7)]\r\n+         # this is where we'll do a list copy\r\n+\r\n+    def breadth_first_search(self, initial_state, goal_state) -> list[State]:\r\n+        queue = [] # or could be a deque\r\n+        queue.append(initial_state)\r\n+        visited_states = set([initial_state])\r\n+        while len(queue) > 0:\r\n+            state_to_explore_from = queue.pop()\r\n+            if state_to_explore_from == goal_state:\r\n+                break\r\n+            neighbors = state_to_explore_from.generate_neighbors()\r\n+            for n in neighbors:\r\n+                    if n not in visited_states:\r\n+                        queue.append(state_to_explore_from)\r\n+                        visited_states.add(n)\n\\ No newline at end of file\n"
                }
            ],
            "date": 1749581672582,
            "name": "Commit-0",
            "content": ""
        }
    ]
}